{"version":3,"sources":["components/Node.js","pub/channels/shapes/triangle.js","pub/channels/shapes/line.js","pub/channels/sync.js","pub/channels/lossysync.js","pub/channels/symbolsPosition/center.js","pub/channels/fifo.js","pub/channels/filter.js","pub/channels/transform.js","pub/channels/syncdrain.js","pub/channels/asyncdrain.js","pub/channels/timer.js","pub/channels/timeddelay.js","pub/channels/timedtransformer.js","components/Channel.js","components/ChannelButtons.jsx","assets/arrow.svg","components/DownloadButton.jsx","components/Treo.jsx","utils/hybridChannels.js","utils/makeRequest.js","components/TreoToCustomLanguage.jsx","utils/parseTreoToHaskellInput.js","utils/encodeTextForRequest.js","index.js","utils/validateCanvasSize.js","utils/getUniqueNodesFromArray.js"],"names":["Node","p","x","y","label","this","radius","noStroke","fill","ellipse","text","px","py","dist","triangle","p5","startNode","endNode","arrowSize","position","size","isInverted","angle","atan2","point","rotationAngle","HALF_PI","push","translate","rotate","pop","line","isDashed","drawingContext","setLineDash","sync","lossysync","center","symbols","options","centerPoint","length","symbol1","symbol2","distanceFromCenter","drawSymbol","centerTwoSymbols","symbol","rectWidth","rectHeight","rect","isTriangleBig","noFill","beginShape","i","vertex","endShape","fifo","filter","transform","syncdrain","asyncdrain","timer","timeddelay","timedtransformer","Channel","channelMode","stroke","strokeWeight","channelsDisplay","ChannelButtons","channelNames","channel","id","name","buttons","getChannelNames","map","className","props","onClick","e","changeChannel","React","Component","DownloadButton","handleDownload","fileData","fileName","preventDefault","link","document","createElement","download","blob","Blob","type","href","URL","createObjectURL","click","revokeObjectURL","src","downloadIcon","alt","Treo","state","treo","isCorrect","nodesReference","changeTreo","bind","newTreo","buildChannelsFromTreo","nodes","channels","readyToDraw","lines","split","slice","replace","match","nodeLabel","nodeX","nodeY","Number","console","log","error","includes","matchedNumbers","startNodeLabel","endNodeLabel","parseTreo","setState","updateDrawingBasedOnTreo","parameters","getHybridDefaultParameters","nodesPositions","n","Math","trunc","prevProps","equal","getNodesPositionsFromDrawing","c","getTreoFromDrawing","saveTreoCode","treoWithComments","cols","rows","value","onChange","target","http","require","hostname","port","method","data","path","a","Promise","resolve","reject","req","request","res","statusCode","on","d","dataString","TextDecoder","decode","status","write","end","makeRequest","TreoToCustomLanguage","renderButton","title","filename","parseTreoToHaskellInput","handleClick","resultTitle","resultCode","resultError","resultFileName","treoData","TextEncoder","encode","JSON","stringify","content","response","App","treoEntry","treoCode","canvasX","canvasY","sketch","previousNode","count","firstNode","designMode","self","main","currentNode","nodeClicked","newNodeCreated","node","clicked","mouseX","mouseY","concat","setup","createCanvas","mouseClicked","textSize","keyTyped","key","mouseDragged","mouseInResizeArea","isCanvasSizeValid","minWidth","minHeight","validateCanvasSize","resizeCanvas","nodesCollapsed","otherNode","moveNode","draw","background","drawResizeCanvasIcon","textFont","newNodes","newChannels","newUniqueNodes","uniqueLabels","uniqueNodes","getUniqueNodesFromArray","addChannelsFromTreo","display","newMode","channelsFromTreo","render","getElementById"],"mappings":"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","file":"static/js/main.40daf81b.chunk.js","sourcesContent":["class Node {\n  /**\n   * @param p p5.js instance to create the drawing\n   * @param {number} x node's x position\n   * @param {number} y node's y position\n   * @param {string} label node's label for identification\n   */\n  constructor(p, x, y, label) {\n    this.p = p;\n    this.x = x;\n    this.y = y;\n    this.label = label;\n    this.radius = 20;\n  }\n\n  display() {\n    this.p.noStroke();\n    this.p.fill(255);\n    this.p.ellipse(this.x, this.y, this.radius, this.radius);\n    this.p.fill(10);\n    this.p.text(this.label, this.x - 5, this.y + 4);\n  }\n\n  clicked(px, py) {\n    const d = this.p.dist(px, py, this.x, this.y);\n    return d <= this.radius;\n  }\n}\n\nexport default Node;\n","/** draws a triangle\n * @param {string} position \"center\" draws the triangle between startNode and endNode,\n * otherwise draws at endNode\n * @param {string} size \"big\" draws a big triangle, otherwise draws a normal triangle\n * @param {boolean} isInverted\n */\nexport default function triangle(\n  p5,\n  startNode,\n  endNode,\n  arrowSize,\n  position,\n  size,\n  isInverted\n) {\n  const angle = p5.atan2(startNode.y - endNode.y, startNode.x - endNode.x); //angle of the line\n  let point = { x: endNode.x, y: endNode.y };\n  if (position === \"start\") {\n    point = { x: startNode.x, y: startNode.y };\n  } else if (position === \"center\") {\n    point.x = (startNode.x + endNode.x) / 2;\n    point.y = (startNode.y + endNode.y) / 2;\n  }\n\n  let rotationAngle = p5.HALF_PI;\n  if (isInverted) rotationAngle *= -1;\n\n  p5.push();\n  p5.translate(point.x, point.y); //translates to the specific point\n  p5.rotate(angle - rotationAngle); //rotates the arrow point\n\n  if (isInverted || position === \"start\") p5.translate(0, -arrowSize * 4); // so the triangle is not exactly on top of node\n\n  if (size === \"big\") {\n    //draws the arrow point as a big triangle\n    p5.triangle(-arrowSize, arrowSize, arrowSize, arrowSize, 0, -arrowSize / 2);\n  } else {\n    //draws the arrow point as a normal triangle\n    p5.triangle(\n      -arrowSize / 2,\n      arrowSize * 2,\n      arrowSize / 2,\n      arrowSize * 2,\n      0,\n      arrowSize\n    );\n  }\n\n  p5.pop();\n}\n","/**\n * draws a line between startNode and endNode\n * @param {boolean} isDashed if true, draws a dashed line, otherwise draws a solid line\n */\nexport default function line(p5, startNode, endNode, isDashed) {\n  if (isDashed) p5.drawingContext.setLineDash([5, 10]);\n  p5.line(startNode.x, startNode.y, endNode.x, endNode.y);\n  p5.drawingContext.setLineDash([]); //reset to solid line\n}\n","import triangle from \"./shapes/triangle\";\nimport line from \"./shapes/line\";\n\n/** draws sync channel */ \nexport function sync(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  triangle(p5, startNode, endNode, arrowSize);\n}\n","import line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws lossysync channel */\nexport function lossysync(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode, true);\n  triangle(p5, startNode, endNode, arrowSize);\n}\n","/** draws a symbol in the middle of startNode and endNode\n * @param {string[]} symbols symbols to draw: \"circle\" or \"rectangle\"\n * @param {object} options object with drawing options\n * @param {number?} options.radius size of the circle, default is 10\n * @param {boolean?} options.isDouble if true, draws two symbols, otherwise draws only one; default is false\n */\nexport default function center(p5, startNode, endNode, symbols, options) {\n  const centerX = (startNode.x + endNode.x) / 2;\n  const centerY = (startNode.y + endNode.y) / 2;\n  const centerPoint = { x: centerX, y: centerY };\n  const angle = p5.atan2(startNode.y - endNode.y, startNode.x - endNode.x); //angle of the line\n\n  p5.push();\n  p5.translate(centerPoint.x, centerPoint.y); // translate to the middle of startNode and endNode\n  p5.rotate(angle - p5.HALF_PI); // rotates to the same inclination of the lines\n  if (symbols.length > 1) {\n    centerTwoSymbols(p5, symbols[0], symbols[1], options);\n  } else {\n    drawSymbol(p5, symbols[0], options);\n  }\n  p5.pop();\n}\n\nfunction centerTwoSymbols(p5, symbol1, symbol2, options) {\n  const distanceFromCenter = symbol1 === \"line\" && symbol2 === \"line\" ? 4 : 8;\n\n  // first symbol\n  p5.push();\n  p5.translate(0, distanceFromCenter);\n  drawSymbol(p5, symbol1, options);\n  p5.pop();\n\n  // second symbol\n  p5.push();\n  p5.translate(0, -distanceFromCenter);\n  drawSymbol(p5, symbol2, options);\n  p5.pop();\n}\n\nfunction drawSymbol(p5, symbol, options) {\n  const size = options?.size ?? 10;\n  if (symbol === \"circle\") {\n    p5.ellipse(0, 0, size);\n  } else if (symbol === \"rectangle\") {\n    const rectWidth = size;\n    const rectHeight = size * 2;\n    p5.rect(-rectWidth / 2, -rectHeight / 2, rectWidth, rectHeight);\n  } else if (symbol === \"line\") {\n    p5.rotate(p5.HALF_PI); // rotate to be perpendicular\n    p5.line(0, size, 0, -size);\n  } else if (symbol === \"triangle\") {\n    if (options?.isTriangleBig) {\n      //draws the arrow point as a big triangle\n      p5.triangle(-size, size, size, size, 0, -size / 2);\n    } else {\n      //draws the arrow point as a normal triangle\n      p5.triangle(-size / 2, size * 2, size / 2, size * 2, 0, size);\n    }\n  } else if (symbol === \"zigzag\") {\n    const vertexSize = 6;\n    p5.push();\n    p5.translate(0, -vertexSize * 2.5); // translate so that the middle of zigzag is in the middle of the line\n    p5.noFill();\n    p5.beginShape();\n    let x = -vertexSize;\n    for (let i = 0; i < vertexSize; i++) {\n      p5.vertex(x, i * vertexSize); // draw the lines\n      if (x == -vertexSize) x = vertexSize; // make the lines zigzag\n      else x = -vertexSize;\n    }\n    p5.endShape();\n    p5.pop();\n  }\n}\n","import center from \"./symbolsPosition/center\";\nimport line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws fifo channel */\nexport function fifo(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  center(p5, startNode, endNode, [\"rectangle\"]);\n  triangle(p5, startNode, endNode, arrowSize);\n}\n","import center from \"./symbolsPosition/center\";\nimport line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws filter channel */\nexport function filter(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  center(p5, startNode, endNode, [\"zigzag\"]);\n  triangle(p5, startNode, endNode, arrowSize);\n}\n","import center from \"./symbolsPosition/center\";\nimport line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws transform channel */\nexport function transform(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  center(p5, startNode, endNode, [\"triangle\"], { isTriangleBig: true });\n  triangle(p5, startNode, endNode, arrowSize);\n}\n","import line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws syncdrain channel */\nexport function syncdrain(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  triangle(p5, startNode, endNode, arrowSize, \"start\");\n  triangle(p5, startNode, endNode, arrowSize, \"end\", \"normal\", true);\n}\n","import center from \"./symbolsPosition/center\";\nimport line from \"./shapes/line\";\nimport triangle from \"./shapes/triangle\";\n\n/** draws asyncdrain channel */\nexport function asyncdrain(p5, startNode, endNode, arrowSize) {\n  const angle = p5.atan2(startNode.y - endNode.y, startNode.x - endNode.x); //angle of the line\n  const mediumX = (startNode.x + endNode.x) / 2;\n  const mediumY = (startNode.y + endNode.y) / 2;\n\n  line(p5, startNode, endNode);\n\n  center(p5, startNode, endNode, [\"line\", \"line\"]);\n\n  triangle(p5, startNode, endNode, arrowSize, \"start\");\n  triangle(p5, startNode, endNode, arrowSize, \"end\", \"normal\", true);\n}\n","import triangle from \"./shapes/triangle\";\nimport line from \"./shapes/line\";\nimport center from \"./symbolsPosition/center\";\n\n/** function for drawing timer channel */\nexport function timer(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  triangle(p5, startNode, endNode, arrowSize);\n  center(p5, startNode, endNode, [\"circle\"]);\n}\n","import triangle from \"./shapes/triangle\";\nimport line from \"./shapes/line\";\nimport center from \"./symbolsPosition/center\";\n\n/** function for drawing timed delay channel */\nexport function timeddelay(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  triangle(p5, startNode, endNode, arrowSize);\n  center(p5, startNode, endNode, [\"circle\", \"circle\"]);\n}\n","import triangle from \"./shapes/triangle\";\nimport line from \"./shapes/line\";\nimport center from \"./symbolsPosition/center\";\n\n/** function for drawing timed delay channel */\nexport function timedtransformer(p5, startNode, endNode, arrowSize) {\n  line(p5, startNode, endNode);\n  triangle(p5, startNode, endNode, arrowSize);\n  center(p5, startNode, endNode, [\"triangle\", \"circle\"], { isTriangleBig: true });\n}\n","import * as channelsDisplay from \"../pub\";\r\n\r\nclass Channel {\r\n  /**\r\n   * @param p p5.js instance to create the drawing\r\n   * @param startNode node where the channel starts from\r\n   * @param endNode node where the channel ends\r\n   * @param {string} channelMode the channel mode that determs the drawing type\r\n   */\r\n  constructor(p, startNode, endNode, channelMode) {\r\n    this.p = p;\r\n    this.startNode = startNode;\r\n    this.endNode = endNode;\r\n    this.channelMode = channelMode;\r\n  }\r\n\r\n  display() {\r\n    this.p.stroke(160);\r\n    this.p.strokeWeight(2);\r\n    this.p.fill(160);\r\n\r\n    const arrowSize = 10;\r\n\r\n    channelsDisplay[this.channelMode](\r\n      this.p,\r\n      this.startNode,\r\n      this.endNode,\r\n      arrowSize\r\n    );\r\n  }\r\n}\r\n\r\nexport default Channel;\r\n","import React from \"react\";\r\nimport * as channelsDisplay from \"../pub\";\r\n\r\nexport class ChannelButtons extends React.Component {\r\n  getChannelNames() {\r\n    let channelNames = [];\r\n    let i = 0;\r\n    for (let channel in channelsDisplay) {\r\n      channelNames.push({ id: i, name: channel });\r\n      i++;\r\n    }\r\n    return channelNames;\r\n  }\r\n\r\n  render() {\r\n    const channels = this.getChannelNames();\r\n    const buttons = channels.map((channel) => {\r\n      return (\r\n        <button\r\n          key={channel.id}\r\n          className={\r\n            channel.name === this.props.channelMode\r\n              ? \"selected-button\"\r\n              : \"not-selected-button\"\r\n          }\r\n          onClick={(e) => {\r\n            this.props.changeChannel(channel.name, e);\r\n          }}\r\n        >\r\n          {channel.name}\r\n        </button>\r\n      );\r\n    });\r\n\r\n    return <div className=\"ChannelButtons\">{buttons}</div>;\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/arrow.190cd4af.svg\";","import React from \"react\";\nimport downloadIcon from \"../assets/arrow.svg\"\n\nexport default class DownloadButton extends React.Component {\n  handleDownload = (fileData, fileName) => (e) => {\n    e.preventDefault();\n    const link = document.createElement(\"a\");\n    link.download = fileName;\n    const blob = new Blob([fileData], { type: \"text/plain\" });\n    link.href = URL.createObjectURL(blob);\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n\n  render() {\n    return (\n      <button\n        type=\"button\"\n        id=\"download-button\"\n        onClick={this.handleDownload(this.props.fileData, this.props.fileName)}\n      >\n        <span>Download</span>\n        <img src={downloadIcon} alt=\"download icon\" />\n      </button>\n    );\n  }\n}\n","import React from \"react\";\nimport equal from \"fast-deep-equal\";\nimport DownloadButton from \"./DownloadButton\";\nimport * as channelsDisplay from \"../pub\";\nimport { isHybridChannel, getHybridDefaultParameters } from \"../utils/hybridChannels\";\n\nfunction getChannelNames() {\n  let channelNames = [];\n  for (let channel in channelsDisplay) {\n    channelNames.push(channel);\n  }\n  return channelNames;\n}\n\nexport class Treo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { treo: \"\", isCorrect: true, nodesReference: {} };\n    this.changeTreo = this.changeTreo.bind(this);\n  }\n\n  changeTreo(newTreo) {\n    this.buildChannelsFromTreo(newTreo);\n  }\n\n  parseTreo(treo) {\n    const channelNames = getChannelNames();\n    let nodes = {};\n    let channels = [];\n    let readyToDraw = true;\n\n    const lines = treo\n      .split(/;\\n/)\n      .slice(0, -1); // remove the last element because it's empty\n\n    for (let line of lines) {\n      line = line.replace(/\\s/g, \"\") // remove whitespaces\n      const commentRegex = /#.*/;\n      if (line.match(commentRegex)) {\n        const nodeCommentRegex = /#\\d+\\(\\d+,\\d+\\)/; // #nodeLabel(node.x,node.y)\n        if (line.match(nodeCommentRegex)) {\n          const nodeLabel = line.match(/#\\d+/)[0].replace(\"#\", \"\");\n          const nodeX = line.match(/\\(\\d+/)[0].replace(\"(\", \"\");\n          const nodeY = line.match(/,\\d+/)[0].replace(\",\", \"\");\n          nodes[nodeLabel] = { x: Number(nodeX), y: Number(nodeY) };\n          continue;\n        } else {\n          console.log(`fix ${line}`);\n          readyToDraw = false;\n          break;\n        }\n      }\n\n      const regex = /[a-z]+\\(\\d+,\\d+\\)/; // channelMode(startLabel,endLabel)\n\n      const hybridRegex = /[a-z]+\\(\\d+,\\d+\\)\\[.*,.*\\]/; // channelMode(startLabel,endLabel)[*,*]\n\n      if (!line.match(regex) && !line.match(hybridRegex)) {\n        console.error(`fix ${line}`);\n        readyToDraw = false;\n        break;\n      }\n      const channelMode = line.match(/[a-z]+/)[0];\n      if (!channelNames.includes(channelMode)) {\n        console.error(`${channelMode} is not a valid channel`);\n        readyToDraw = false;\n        break;\n      }\n\n      const labels = line.match(/\\(\\d+,\\d+\\)/)[0];\n      const matchedNumbers = labels.match(/\\d+/g);\n      const startNodeLabel = Number(matchedNumbers[0]);\n      const endNodeLabel = Number(matchedNumbers[1]);\n      if (!(startNodeLabel in nodes) || !(endNodeLabel in nodes)) {\n        console.log(`fix nodes positions`);\n        readyToDraw = false;\n        break;\n      }\n      channels.push({\n        startNode: {\n          x: nodes[startNodeLabel].x,\n          y: nodes[startNodeLabel].y,\n          label: startNodeLabel,\n        },\n        endNode: {\n          x: nodes[endNodeLabel].x,\n          y: nodes[endNodeLabel].y,\n          label: endNodeLabel,\n        },\n        channelMode: channelMode,\n      });\n    }\n    return { readyToDraw, channels };\n  }\n\n  buildChannelsFromTreo(newTreo) {\n    let { readyToDraw, channels } = this.parseTreo(newTreo);\n\n    if (readyToDraw) {\n      this.setState({ isCorrect: true });\n      this.props.updateDrawingBasedOnTreo(channels);\n    } else {\n      this.setState({ isCorrect: false });\n    }\n    this.setState({ treo: newTreo });\n  }\n\n  getTreoFromDrawing(startNode, endNode, channelMode) {\n    /**\n     * Get Treo of a drawing's channel to update textarea value\n     * @param startNode the first Node object of the channel\n     * @param endNode the second Node object of the channel\n     * @param channelMode the channel mode\n     * @returns a string with this channel treo\n     */\n    let treo;\n    const nodes = `(${startNode.label},${endNode.label})`;\n    if (isHybridChannel(channelMode)) {\n      const parameters = getHybridDefaultParameters(channelMode);\n      treo = `${channelMode}${nodes}${parameters};\\n`;\n    }\n    else treo = `${channelMode}${nodes};\\n`;\n\n    return treo;\n  }\n\n  getNodesPositionsFromDrawing(nodes) {\n    /**\n     * Get the positions of the drawing's nodes to show in the Treo textarea as comments\n     * @param nodes list of Nodes objects\n     * @returns a string with all the nodes labels and theirs positions\n     */\n    let nodesPositions = \"\";\n    for (let n of nodes) {\n      const x = Math.trunc(n.x);\n      const y = Math.trunc(n.y);\n      nodesPositions += `# ${n.label} (${x}, ${y});\\n`;\n    }\n    return nodesPositions + \"\\n\";\n  }\n\n  // componentDidUpdate is triggered when either the props or the state has changed\n  // to not enter a loop, we need to verify if the props changed before updating again\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.channels, prevProps.channels)) {\n      let nodesPositions = this.getNodesPositionsFromDrawing(this.props.nodes);\n      let newTreo = \"\";\n      for (let c of this.props.channels) {\n        newTreo += this.getTreoFromDrawing(\n          c.startNode,\n          c.endNode,\n          c.channelMode\n        );\n      }\n      this.props.saveTreoCode(newTreo);\n      const treoWithComments = nodesPositions + newTreo;\n      this.setState({ treo: treoWithComments });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Treo\">\n        <header>\n          <h3 className=\"treo-title\">Treo</h3>\n          <DownloadButton fileData={this.state.treo} fileName=\"treo.txt\" />\n        </header>\n        <textarea\n          className={this.state.isCorrect ? \"right\" : \"wrong\"}\n          cols=\"40\"\n          rows=\"10\"\n          value={this.state.treo}\n          onChange={(e) => {\n            this.changeTreo(e.target.value, e);\n          }}\n        />\n      </div>\n    );\n  }\n}\n","export function isHybridChannel(channel) {\n  if (channel === \"timer\") return true;\n  if (channel === \"timeddelay\") return true;\n  if (channel === \"timedtransformer\") return true;\n\n  return false;\n}\n\nexport function getHybridDefaultParameters(channel) {\n  if (channel === \"timer\") return \"[5, var - 1;]\";\n  if (channel === \"timeddelay\") return \"[5, 10;]\";\n  if (channel === \"timedtransformer\") return \"[5, var - 1;]\";\n\n  return \"[,]\"\n}\n","const http = require(\"http\");\n\nconst options = {\n  hostname: \"localhost\",\n  port: 8081,\n  method: \"POST\",\n};\n\nasync function makeRequest(data, path) {\n  options[\"path\"] = path;\n  return await new Promise((resolve, reject) => {\n    const req = http.request(options, (res) => {\n      console.log(`statusCode: ${res.statusCode}`);\n\n      res.on(\"data\", (d) => {\n        const dataString = new TextDecoder().decode(d);\n        resolve({ status: res.statusCode, data: dataString });\n      });\n    });\n\n    req.on(\"error\", (error) => {\n      console.error(error);\n      reject(error);\n    });\n\n    req.write(data);\n    req.end();\n  });\n}\n\nexport default makeRequest;\n","import React from \"react\";\nimport encodeTextForRequest from \"../utils/encodeTextForRequest\";\nimport makeRequest from \"../utils/makeRequest\";\nimport parseTreoToHaskellInput from \"../utils/parseTreoToHaskellInput\";\nimport DownloadButton from \"./DownloadButton\";\n\nconst isLightVersion = true; // feature flag to publish the interface in github pages; comment this line if you are running the project on your machine\n\nclass TreoToCustomLanguage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultTitle: \"\",\n      resultCode: \"\",\n      resultError: \"\",\n      resultFileName: \"\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  async handleClick(treo, path, title, filename) {\n    if (!treo) {\n      this.setState({ resultError: \"Error. Treo is empty.\" });\n      return;\n    }\n    const treoData = encodeTextForRequest(treo);\n    const response = await makeRequest(treoData, path);\n    if (response.status === 200)\n      this.setState({\n        resultCode: response.data,\n        resultTitle: title,\n        resultError: \"\",\n        resultFileName: filename,\n      });\n    else\n      this.setState({\n        resultError: \"Error. Please verify if treo is correct.\",\n      });\n  }\n\n  renderButton = (text, path, title, filename) => {\n    const treo =\n      path === \"/haskell/model\"\n        ? parseTreoToHaskellInput(this.props.treo)\n        : this.props.treo;\n    return (\n      <button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          this.handleClick(treo, path, title, filename, e);\n        }}\n      >\n        {text}\n      </button>\n    );\n  };\n\n  render() {\n    return (\n      <main className=\"options-container\">\n        {isLightVersion ? (\n          <p>\n            This is a light version.{\" \"}\n            <a href=\"https://github.com/frame-lab/ReoXplore2\">\n              See instructions\n            </a>{\" \"}\n            for running the project locally to get access to all features.\n          </p>\n        ) : (\n          <div>\n            <div>\n              {this.renderButton(\n                \"Generate nuXmv compact code\",\n                \"/nuXmv/compact\",\n                \"nuXmv compact\",\n                \"nuXmvCompact.smv\"\n              )}\n              {this.renderButton(\n                \"Generate nuXmv components code\",\n                \"/nuXmv/components\",\n                \"nuXmv components\",\n                \"nuXmvComponents.smv\"\n              )}\n              {this.renderButton(\n                \"Generate Coq model\",\n                \"/coq/model\",\n                \"Coq model\",\n                \"coqModel.v\"\n              )}\n              {this.renderButton(\n                \"Generate Haskell code\",\n                \"/haskell/model\",\n                \"Haskell code\",\n                \"haskellModel.hs\"\n              )}\n            </div>\n            {this.state.resultError ? (\n              <p className=\"error-msg\">{this.state.resultError}</p>\n            ) : (\n              <div className=\"result-container\">\n                {this.state.resultCode && (\n                  <div>\n                    <div className=\"result-header\">\n                      <h4>{this.state.resultTitle}</h4>\n                      <DownloadButton\n                        fileData={this.state.resultCode}\n                        fileName={this.state.resultFileName}\n                      />\n                    </div>\n                    <textarea\n                      readOnly\n                      cols=\"80\"\n                      rows=\"20\"\n                      value={this.state.resultCode}\n                    ></textarea>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default TreoToCustomLanguage;\n","/** Replace all numbers of treo with a{number} to prepare for haskell compiler input.\n * @param {string} treo\n * @returns {string} the treo with its labels modified\n * i.e. sync(1,2) becomes sync(a1,a2)\n */\nexport default function parseTreoToHaskellInput(treo) {\n  const regex = /(\\d+)/g;\n  const treoForHaskellInput = treo.replace(regex, \"a$1\");\n  return treoForHaskellInput;\n}\n","export default function encodeTextForRequest(data) {\n  return new TextEncoder().encode(\n    JSON.stringify({\n      content: data,\n    })\n  );\n}\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nimport \"./style.css\";\r\nimport Node from \"./components/Node\";\r\nimport Channel from \"./components/Channel\";\r\nimport getUniqueNodesFromArray from \"./utils/getUniqueNodesFromArray\";\r\nimport validateCanvasSize from \"./utils/validateCanvasSize\";\r\nimport { ChannelButtons } from \"./components/ChannelButtons\";\r\nimport { Treo } from \"./components/Treo\";\r\nimport TreoToCustomLanguage from \"./components/TreoToCustomLanguage\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      channel: \"sync\",\r\n      nodes: [],\r\n      channels: [],\r\n      treoEntry: [],\r\n      treoCode: \"\",\r\n      canvasX: 800,\r\n      canvasY: 400,\r\n    };\r\n    this.sketch = this.sketch.bind(this);\r\n    this.changeChannel = this.changeChannel.bind(this);\r\n    this.updateDrawingBasedOnTreo = this.updateDrawingBasedOnTreo.bind(this);\r\n    this.saveTreoCode = this.saveTreoCode.bind(this);\r\n  }\r\n\r\n  sketch(p) {\r\n    let count = 1;\r\n    let previousNode;\r\n    let firstNode = true;\r\n    let designMode = false;\r\n    const self = this; //to access this.state.channel on function main\r\n\r\n    p.setup = () => {\r\n      const canvas = p.createCanvas(this.state.canvasX, this.state.canvasY);\r\n      canvas.mouseClicked(main);\r\n      p.textSize(12);\r\n    };\r\n\r\n    p.keyTyped = () => {\r\n      if (p.key === \"d\") designMode = true;\r\n      else designMode = false;\r\n    };\r\n\r\n    p.mouseDragged = () => {\r\n      const mouseInResizeArea =\r\n        p.mouseX > this.state.canvasX - 25 &&\r\n        p.mouseY > this.state.canvasY - 25 &&\r\n        p.mouseX < this.state.canvasX + 25 &&\r\n        p.mouseY < this.state.canvasY + 25;\r\n      const isCanvasSizeValid = validateCanvasSize(p.mouseX, p.mouseY, this.state.nodes);\r\n      if (mouseInResizeArea && isCanvasSizeValid) {\r\n        p.resizeCanvas(p.mouseX, p.mouseY);\r\n        this.setState({ canvasX: p.mouseX, canvasY: p.mouseY });\r\n      }\r\n\r\n      if (designMode) moveNode();\r\n    };\r\n\r\n    p.draw = () => {\r\n      p.background(220);\r\n      drawResizeCanvasIcon(self.state.canvasX, self.state.canvasY);\r\n      if (designMode) drawDesignModeText();\r\n\r\n      if (self.state.treoEntry.length > 0) {\r\n        // add channels and nodes coming from treo\r\n        addChannelsFromTreo(self.state.treoEntry);\r\n      }\r\n\r\n      for (const channel of self.state.channels) {\r\n        channel.display();\r\n      }\r\n\r\n      for (const node of self.state.nodes) {\r\n        node.display();\r\n      }\r\n    };\r\n\r\n    function main() {\r\n      if (designMode) return;\r\n      let currentNode;\r\n      let nodeClicked = false;\r\n      let newNodeCreated = false;\r\n\r\n      for (const node of self.state.nodes) {\r\n        //checks if a node was clicked\r\n        if (node.clicked(p.mouseX, p.mouseY)) {\r\n          if (firstNode) {\r\n            previousNode = node;\r\n          } else {\r\n            currentNode = node;\r\n          }\r\n          nodeClicked = true;\r\n        }\r\n      }\r\n      if (!nodeClicked) {\r\n        //create new node\r\n        currentNode = new Node(p, p.mouseX, p.mouseY, count);\r\n        self.setState({ nodes: self.state.nodes.concat(currentNode) });\r\n        newNodeCreated = true;\r\n        if (!previousNode) previousNode = currentNode;\r\n      }\r\n\r\n      if (!firstNode) {\r\n        if (previousNode !== currentNode) {\r\n          const channel = new Channel(p, previousNode, currentNode, self.state.channel);\r\n          self.setState({ channels: self.state.channels.concat(channel) });\r\n        }\r\n        previousNode = null;\r\n      }\r\n\r\n      if (newNodeCreated) count++;\r\n      firstNode = !firstNode;\r\n    }\r\n\r\n    function addChannelsFromTreo(treoEntry) {\r\n      let newNodes = [];\r\n      let newChannels = [];\r\n      for (let treo of treoEntry) {\r\n        const startNode = new Node(p, treo.startNode.x, treo.startNode.y, treo.startNode.label);\r\n        const endNode = new Node(p, treo.endNode.x, treo.endNode.y, treo.endNode.label);\r\n        newNodes.push(startNode, endNode);\r\n        newChannels.push(new Channel(p, startNode, endNode, treo.channelMode));\r\n      }\r\n      const newUniqueNodes = getUniqueNodesFromArray(newNodes);\r\n      self.setState({ treoEntry: [], nodes: newUniqueNodes, channels: newChannels });\r\n    }\r\n\r\n    function moveNode() {\r\n      for (const node of self.state.nodes) {\r\n        if (node.clicked(p.mouseX, p.mouseY)) {\r\n          let nodesCollapsed = false;\r\n          for (const otherNode of self.state.nodes) {\r\n            if (node.label === otherNode.label) continue;\r\n            if (otherNode.clicked(p.mouseX, p.mouseY)) nodesCollapsed = true;\r\n          }\r\n          if (!nodesCollapsed) {\r\n            node.x = p.mouseX;\r\n            node.y = p.mouseY;\r\n            self.setState({ nodes: self.state.nodes });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function drawResizeCanvasIcon(x, y) {\r\n      p.push();\r\n      p.stroke(100);\r\n      for (let i = 4; i < 20; i += 4) p.line(x - 2, y - i, x - i, y - 2);\r\n      p.pop();\r\n    }\r\n\r\n    function drawDesignModeText() {\r\n      p.push();\r\n      p.textSize(12);\r\n      p.textFont(\"monospace\");\r\n      p.text(\"design mode\", 10, 20);\r\n      p.pop();\r\n    }\r\n  }\r\n\r\n  changeChannel(newMode) {\r\n    this.setState({ channel: newMode });\r\n  }\r\n\r\n  updateDrawingBasedOnTreo(channelsFromTreo) {\r\n    this.setState({ treoEntry: channelsFromTreo });\r\n  }\r\n\r\n  saveTreoCode(treo) {\r\n    this.setState({ treoCode: treo });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <h1>ReoXplore</h1>\r\n        <section className=\"grid-container\">\r\n          <h3>Channels</h3>\r\n          <ChannelButtons changeChannel={this.changeChannel} channelMode={this.state.channel} />\r\n          <div className=\"p5container\">\r\n            <ReactP5Wrapper sketch={this.sketch} />\r\n          </div>\r\n          <Treo\r\n            nodes={this.state.nodes}\r\n            channels={this.state.channels}\r\n            updateDrawingBasedOnTreo={this.updateDrawingBasedOnTreo}\r\n            saveTreoCode={this.saveTreoCode}\r\n          />\r\n        </section>\r\n        <section className=\"options\">\r\n          <h3>Options</h3>\r\n          <TreoToCustomLanguage treo={this.state.treoCode} />\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n","/** Compare the X and Y positions of the canvas to all nodes and \n * do not allow the canvas to be smaller than the position of any node.\n * @param {number} x canvas desired x position\n * @param {number} y canvas desired y position\n * @param {Array} nodes list of nodes\n * @returns {boolean} true if canvas desired width and height are valid;\n * false otherwise.\n */\nexport default function validateCanvasSize(x, y, nodes) {\n  for (const node of nodes) {\n    const minWidth = node.x + node.radius / 2;\n    const minHeight = node.y + node.radius / 2;\n    if (x <= minWidth || y <= minHeight) return false;\n  }\n  return true;\n}\n","export default function getUniqueNodesFromArray(nodes) {\n  let uniqueLabels = [];\n  let uniqueNodes = [];\n  for (let node of nodes) {\n    if (!uniqueLabels.includes(node.label)) {\n      uniqueNodes.push(node);\n      uniqueLabels.push(node.label);\n    }\n  }\n  return uniqueNodes;\n}\n"],"sourceRoot":""}